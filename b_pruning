import cv2
import numpy as np
import os
import xml.etree.ElementTree as ET
import glob
import matplotlib.pyplot as plt
import math

#Getting base path
base_path_=r"C:\Users\abc\Desktop\PCLProject\complete_testing\2018-10-12\acquisitions\slap_shot_1"
base_path=base_path_.replace('\\','/')

#Getting path to point cloud folder: 2.Reconstruction
path_cloud=base_path+'/2.Reconstruction'
try:
    os.path.exists(path_cloud)
except OSError:
    print("Folder named '2.Reconstruction' does not exist in %s"%(base_path))
else:
    print("Folder '2.Reconstruction' found in %s"%(base_path))

#Creating new folder to save 3d-2d mapping
path_map=base_path+r'/mapping'
try:
    os.mkdir(path_map)
except OSError:
    print ("Creation of the directory %s failed" % path_map)
else:
    print ("Successfully created the directory %s " % path_map)


#Reading data from xml file in the CalibrationData folder
path_xml_=base_path+'/CalibrationData'
path_xml=glob.glob(path_xml_+"/*.xml")
path_xml=path_xml[0].replace("\\",'/')
print(path_xml[0])
tree=ET.parse(path_xml)
root=tree.getroot()
f=[]
cx=[]
cy=[]
matrix=[]
for item in root.findall("./chunk/sensors/sensor[@id='0']"):
    for child in item:
        if child.tag=='calibration':
            for grandchild in child:
                if grandchild.tag=='f':
                    f.append(grandchild.text)
                if grandchild.tag=='cx':
                    cx.append(grandchild.text)
                if grandchild.tag=='cy':
                    cy.append(grandchild.text)
f=np.float32(f)
cx=np.float32(cx)
cy=np.float32(cy)
camera_matrix_list=[[f[0], 0.0, 336+cx[0]],
       [0.0, f[0],304+cy[0]],
       [0.0, 0.0, 1.0]]
camera_matrix=np.array(camera_matrix_list)

for item in root.findall("./chunk/cameras/camera[@sensor_id='0']"):
    for child in item:
        matrix.append(child.text.split(" "))
T_matrix=np.reshape(np.float32(matrix),(4,4))
r_vector=T_matrix[0:3,0:3]
t_vector=T_matrix[0:3,3]


#reading path locations of all the point clouds
cloud_list=[]
for i in glob.glob(path_cloud+'/*.obj'):
    cloud_list.append(i)
print(cloud_list)

#writing mapped file for each point cloud
count=0
for pc in cloud_list:
    file = open(pc.replace('\\','/'), 'r')
    list_xyz = []
    list_norm = []
    for i in file:
        if not (i.find('vn')):
            string = i.strip("vn").strip('\n').replace(" ", ",").strip("").split(",")
            del string[0]
            list_norm.append(string)
        else:
            string = i.strip("v").strip('\n').replace(" ", ",").strip("").split(",")
            del string[0]
            list_xyz.append(string)
    file.close()
    point_array_xyz_ = np.float32(list_xyz)
    point_array_xyz = point_array_xyz_[:, [0, 1, 2]]
    point_array_norm_ = np.float32(list_norm)
    point_array_norm = point_array_norm_[:, [0, 1, 2]]
    point_array_ = []
    for i in range(0, len(point_array_xyz)):
        point_array_.append(
            [point_array_xyz[i, 0], point_array_xyz[i, 1], point_array_xyz[i, 2], point_array_norm[i, 0],
             point_array_norm[i, 1], point_array_norm[i, 2]])
    point_array = np.array(point_array_)
    print(point_array.shape)
    """
    points_list = []
    file = open(pc, 'r')
    i = 1
    for f in file:
        str1 = f.replace('v ', '').replace(' ', ',').split(',')
        print("Reading point cloud %d"%(i))
        points_list.append(str1)
        i = i + 1;
    file.close()
    point_array = np.float32(points_list)
    """
    imagePoints = []


    for i in range(0, len(point_array)):
        points = np.matmul(camera_matrix, (np.matmul(r_vector, np.transpose(point_array[i,[0,1,2]])) + t_vector))
        imagePoints.append(points)
    image_points = np.array(imagePoints)

    pixcel_x_ = []
    pixcel_y_ = []
    for i in range(0, len(point_array)):
        pixcel_x_.append((image_points[i][0] / image_points[i][2]))
        pixcel_y_.append((image_points[i][1] / image_points[i][2]))
    pixcel_x = np.array(pixcel_x_)
    pixcel_y = np.array(pixcel_y_)

    file_new = open(path_map+'/%04d.txt'%(count), 'w+')
    for i in range(0, len(point_array)):
        #file_new.write("%f,%f,%f,%d,%d\n" % (point_array[i][0], point_array[i][1], point_array[i][2], pixcel_x[i], pixcel_y[i]))
        file_new.write("%f,%f,%f,%d,%d,%f,%f,%f\n" % (
        point_array[i][0], point_array[i][1], point_array[i][2], pixcel_x[i], pixcel_y[i], point_array[i][3],
        point_array[i][4], point_array[i][5]))
    file_new.close()
    count=count+1






