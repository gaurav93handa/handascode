import cv2
import numpy as np
import matplotlib.pyplot as plt
import math

base_path="D:/Gaurav/Gaurav_processed/testing/3d_mapping/with_calibration/vicon_slap_shot_1/cam2"


path_=base_path+"/pruned_3dpoints.txt"
path=path_.replace('\\','/');

path_OF_=base_path+"/3d_2d_map.txt"
path_OF=path_OF_.replace('\\','/');

#transformation matrix
"""""
<transform>
9.9338013211135090e-001 -2.9805702560414815e-002 1.1093932225011688e-001 -1.5028065299914068e+000
-2.9203840559915518e-002 -9.9954863937142346e-001 -7.0465046148544758e-003 -1.4643738600859262e-002
1.1109927462853314e-001 3.7600034064098819e-003 -9.9380220041585621e-001 -8.4709483083215700e-002
0.0000000000000000e+000 0.0000000000000000e+000 0.0000000000000000e+000 1.0000000000000000e+000
</transform>

"""
#Getting point_array
points_list=[]
file=open(path,'r')
file_d=open(path_OF,"w+")
i=0
for f in file:
    str1=f.replace('v ','').replace(' ',',').split(',')
    #print(str1)
    points_list.append(str1)
    file_d.write(str(str1))
    i=i+1;
file.close()
file_d.close()
point_array=np.float32(points_list)
print(point_array.shape)


#Getting tvec
tvec_list=[-1.5028065299914,-0.014643738600859,-0.084709483083215];
#tvec_list=[0.0, 0.0, 0.0];
tvec=np.array(tvec_list)
print(tvec)

#Getting rvec
r11=-0.09913871792364284
r12=0.9773899076687221
r13=-0.1867631735535238
r21=0.9920826034304954
r22=0.08254279262523136
r23=-0.09465091312924001
r31=-0.07709489333948955
r32= -0.1946680656218563
r33= -0.9778347108013795
sx=math.sqrt(r11*r11+r21*r21+r31*r31)
"""""
<transform>
9.9338013211135090e-001 -2.9805702560414815e-002 1.1093932225011688e-001 -1.5028065299914068e+000
-2.9203840559915518e-002 -9.9954863937142346e-001 -7.0465046148544758e-003 -1.4643738600859262e-002
1.1109927462853314e-001 3.7600034064098819e-003 -9.9380220041585621e-001 -8.4709483083215700e-002
0.0000000000000000e+000 0.0000000000000000e+000 0.0000000000000000e+000 1.0000000000000000e+000
</transform>

"""

rvec_list=[[0.99338013211135090,-0.029805702560414815,0.11093932225011688],
       [-0.029203840559915518,-0.99954863937142346,-0.0070465046148544758],
       [0.11109927462853314,0.0037600034064098819,-0.99380220041585621]]
"""
rvec_list=[[1.0, 0.0, 0.0],
       [0.0,-1.0, 0.0],
       [0.0, 0.0, -1.0]]
"""
rvec=np.array(rvec_list)

print(rvec)

#cameraMatrix
camera_matrix_list=[[1408.9971650981, 0.0, 336-42],
       [0.0, 1408.9971650981,304-67],
       [0.0, 0.0, 1.0]]
"""
sandbox good points test
camera_matrix_list=[[1462.94220896788, 0.0, 336+6],
       [0.0, 1462.94220896788, 304+5],
       [0.0, 0.0, 1.0]]
"""
camera_matrix=np.array(camera_matrix_list)
print(camera_matrix.shape)

#image_array

#NON_API METHOD
imagePoints=[]
print(np.matmul(rvec,np.transpose(point_array[0]))+tvec)
for i in range(0,len(point_array)):
    points=np.matmul(camera_matrix,(np.matmul(rvec,np.transpose(point_array[i]))+tvec))
    imagePoints.append(points)
image_points=np.array(imagePoints)


pixcel_x_=[]
pixcel_y_=[]
for i in range(0,len(point_array)):
    pixcel_x_.append((image_points[i][0]/image_points[i][2]))
    pixcel_y_.append((image_points[i][1]/image_points[i][2]))
pixcel_x=np.array(pixcel_x_)
pixcel_y=np.array(pixcel_y_)

file_new=open(base_path+'/non_api.txt','w+')
for i in range(0,len(point_array)):
    file_new.write("%d,%d\n" %(pixcel_x[i],pixcel_y[i]))
file_new.close()




#API METHOD
result,jacobin=cv2.projectPoints(point_array, rvec, tvec, camera_matrix,None)
result_final=np.array(result)
x=result_final[:,:,0]

y=result_final[:,:,1]

file_new=open(base_path+'/api.txt','w+')
file_new_2=open(base_path+'/3d_2d_points.txt','w+')
for i in range(0,len(x)):
    file_new.write("%d,%d\n" %(x[i],y[i]))
    file_new_2.write("%f,%f,%f,%d,%d\n"%(point_array[i][0],point_array[i][1],point_array[i][2],x[i],y[i]))
file_new.close()
file_new_2.close()

pruned_x__=np.logical_and(pixcel_x>=0, pixcel_x<=700)
pruned_x_=pruned_x__.astype(int)
pruned_x=pixcel_x*pruned_x_
pruned_y__=np.logical_and(pixcel_y>=0,pixcel_y<=700)
pruned_y_=pruned_y__.astype(int)
pruned_y=pixcel_y*pruned_y_

#plt.plot(pruned_x,pruned_y,'bo')

img=cv2.imread(base_path+"/cam2.png")
ax=plt.gca()                            # get the axis
#ax.xaxis.tick_bottom()                     # and move the X-Axis
#ax.yaxis.tick_left()
#ax.xaxis_inverted()
ax.yaxis_inverted()
plt.imshow(img)
plt.plot(pixcel_x,pixcel_y,'bo')
plt.show();
